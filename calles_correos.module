<?php

function calles_correos_existe_registro_id($id){
	$sql = "SELECT idregistro FROM {POSTALT} WHERE idregistro = %d";
	$result = db_result(db_query($sql,$id));
	if($result !== false)$result = TRUE;
	return $result;
}


function calles_correos_devolver_tipo_via($codigo){
	
	$query = db_result(db_query("SELECT CODVIA.descvia FROM {POSTALT}
							LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia 
							WHERE POSTALT.idregistro=%d",$codigo));	
	//si es vacio, se sabe por la documentacion de las tablas que es calle el tipo de via.
	if(!empty($codigo) && $query==null && is_numeric($codigo)){
		$query = "CALLE";
	}
	
	return $query;
}
function calles_correos_devolver_datos_registro($codigo){	
	$sql = "SELECT POSTALT.codvia, POSTALT.viapobla, POSTALT.codigo_postal, CODCIU.descripcion FROM {POSTALT} ".
		    //"LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia ". 
			"LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad ". 
			"WHERE POSTALT.idregistro=%d";	
	$result = db_query($sql, $codigo);
	$datos = array();
	while ($data = db_fetch_array($result)){

		$datos['localidad'] = $data['descripcion'];
		$datos['codigo_postal'] = $data['codigo_postal'];
		$datos['calle'] = $data['viapobla'];	
		$datos['tipovia'] = $data['codvia'];
		if(is_null($data['codvia'])||empty($data['codvia']))$datos['tipovia'] = 'CL';
	}
	return $datos;
}




function calles_correos_devolver_via_codigo_registro($codigo){
	
	$query = db_result(db_query("SELECT viapobla FROM {POSTALT}
								 WHERE POSTALT.idregistro=%d", $codigo));
	return $query;
}

function calles_correos_devolver_codigo_postal($codigo){
	
	$query = db_result(db_query("SELECT codigo_postal FROM {POSTALT} 
								WHERE POSTALT.idregistro=%d", $codigo));
	return $query;
}
function calles_correos_devolver_poblacion($codigo){

	//sql antigua cuando teniamos las dos tablas de codmun y codciu
	
	/**$sql = "SELECT if( POSTALT.cmun =0, (SELECT descripcion FROM CODCIU WHERE CODCIU.codlocalidad = POSTALT.codlocalidad), ("
		."SELECT descripcion FROM CODMUN WHERE CODMUN.cpro = POSTALT.cpro AND CODMUN.cmun = POSTALT.cmun) ) AS nombrePoblacion FROM POSTALT "
		."WHERE POSTALT.idregistro = '%s'";		
		$query = db_result(db_query($sql,$codigo));*/
	$query = db_result(db_query("SELECT CODCIU.descripcion FROM POSTALT,CODCIU where POSTALT.codlocalidad = CODCIU.codlocalidad and POSTALT.idregistro = %s",$codigo));	

		
	return $query;
	
}

function calles_correos_autocomplete($string = '', $provincia){
	 $inicioi = time();
	 $totalLongitudMostrar = 60;
	 $totalCombinacionesPalabra = 100;
     //elimino espacios en blanco del final del string
     $string = rtrim($string);
     //convertir toda la cadena a mayusculas 
     $string = mb_strtoupper($string); //para que no haya problemas como con el strtoupper al pasar a mayusculas con la letra ñ.
     //eliminar tildes
     $cad = calles_correos_eliminar_tildes($string);
     //a la hora de hacer la comparación para autocompletar es donde tendré que ver si ha encontrado alguna cadena
     //igual a lo intruducido. Si no, entonces hacemos las posibles búsquedas por los patrones. 
    
     //quito dobles espacios en blanco
     $cadc = $cad;
     $cad = quitarDobleEspacioBlanco($cadc);
      //todo a mayusculas y sin tildes.
     $matches1 = busquedaExacta($cadc);//$matches1=busquedaExacta($cad.'%');
     //guardo en $arrayId todos los Id's que hemos encontrado en la primera búsqueda.
     //teniendo en cuenta que $matches1, es un array cuyos índices son las claves
     $arrayId = array_keys($matches1);
     //tamaño del array tras realizar la primera busqueda
     $longitud = sizeof($matches1);
	 //si despues de la primera busqueda no hemos encontrado el minimo de registros necesarios,
	 //seguimos buscando.
	 //verifico si es solo una palabra o no. De forma que, 
	 // como "cad" devuelve cadenas donde encuentre esa cadena de forma seguida en cualquier parte, 
	 //si solo es una palabra, lo que no haya encontrado en la primera búsqueda no lo va a encontrar en la segunda
	
 //  if ($pos!=false){
     if($longitud<$totalLongitudMostrar){
     	 $copia=$cad;
     	// $copia = '%' . $copia .'%'; 
 		$array= explode(' ',$copia);
	    $copia= '+'.implode($array,' +').'*';
     	 $compLike = $copia;
     	 //cadena regexp
	 	/* $cadena1 = calles_correos_errores_mnb($cad,$copia);
	 	 $cadena2 = calles_correos_errores($cadena1,$copia); //$copia //$compLike1
	     $cadena3 = calles_correos_faltas_h($cadena2,$copia); //$copia //$compLike2
		 $cadena4 = calles_correos_art_prep($cadena3,$copia); //$copia //$compLike3
   
	 	 $cadena = "(" .$cad . "|" . $cadena1. "|" . $cadena2. "|" . $cadena3 . "|" . $cadena4 . ")";  */
		 //$cadCompLike = construirCadComparacionLike($string);
		 //CONSTRUCCION CADENA LIKE
		 $cadena1 = $string;
		 $array_posiciones = array();
		 $array_posiciones[0] = array('NB','MB','NV','MV');
		 $array_posiciones[1] = array ('NP','MP');
		 $array_posiciones[2] = array('TX','TZ','CH');
		 $array_posiciones[3] = array('GU','G','X','J');
		 $array_posiciones[4] = array('RR','R');
		 $array_posiciones[5] = array('V','B');
		 $array_posiciones[6] = array('LL','Y','I');
		 $array_posiciones[7] = array('C','K','QU');
		 $array_posiciones[8] = array('N','Ñ');
 	 
		 $array_sustituciones = array();

		 for($indice = 0;$indice<sizeof($array_posiciones);$indice++){
		 	 $key = $array_posiciones[$indice];
		 	 for($ind2 = 0;$ind2<sizeof($key);$ind2++){
		 	        $k = $key[$ind2];
					$array_sustituciones[$k] = $indice;	//creo arrays de la forma $array_sustituciones['NB']  = $array_posiciones[0]; etc;
		 	 }		 
		 }
		 	
		 $array_separar = explode(" ", $cadena1);
		 $k = 0; //indice del array donde guardaré las palabras 
		 //primero recorro el array por palabras
		 $comb = 0;
		 $numero = 0;
		 for($i = 0; $i< sizeof($array_separar);$i++){
		 	
		 	//por cada palabra introducida, ver si hay alguna letra a sustituir.
		 	$palabra = $array_separar[$i];
		 	
		 	if(strlen($palabra)>2)
		 		$cadenaBusqueda = $cadenaBusqueda.' +(>'.$palabra;
		 	else 
		 		$cadenaBusqueda = $cadenaBusqueda.'+'.$palabra.' ';
		 		//ahora compruebo si hay letras del array de sustituciones en cada palabra del array inicial
		 	foreach($array_sustituciones as $key => $value){
		 
		 		//busco si existe esa letra en esa palabra
		 		$pos = strpos($palabra,$key);//$array_sustituciones[$key]);
		 		if($pos!==FALSE){
		 			//ha encontrado la letra a cambiar. Al menos una.
		 			//cambiamos
		 			//si existe la key, entonces, 
		 		if(sizeof($array_combinaciones)>0){
					foreach($array_combinaciones as $key2 => $valor2){ //añadido viernes antes de irme
						//ver si alguna de las key ya guardaddas, forma parte de la key nueva. 
						//De manera, que si tenemos alguna key de las dos letras, ya no mete otra clave 
						//del estilo a CH y luego otra clave con H
						if(strlen($key)==1 && strlen($key2)==2){
							
							$devuelve = strpos($key2,$key); 
							if($devuelve!==FALSE)
								$contiene = true;
							else 
								$contiene = false;
						
						}
						else 
							$devuelve = strpos($key,$key2);
							
						if($devuelve===FALSE && !$contiene){//añadido viernes antes de irme
								$array_combinaciones[$key] = $array_sustituciones[$key];	
							
						}
					}
		 		}
		 		else $array_combinaciones[$key] = $array_sustituciones[$key];	
		 			//recorro el contenido de cada posicion del array (cada letra por lo que puede ser sustituida
		 			 			
		 		}//en if ($pos)
		 	
		 	}//en foreach
		
		 	
		 	
		//$array_combinaciones a cambiar
		if(sizeof($array_combinaciones)>0){
				//recorro $array_combinaciones para ver en $palabra cuantlas letras hay de cada $key
				//repeticiones de $key en palabra
			foreach($array_combinaciones as $clave => $valor){
				
				for($posi = 0;$posi<strlen($palabra);$posi++){
					if(strlen($clave)===2 && $posi+1<strlen($palabra))
					    $iguales = strcmp ($clave,$palabra[$posi].$palabra[$posi+1]);
					else
						$iguales = strcmp($clave,$palabra[$posi]);
					//son iguales
					if($iguales == 0){
						$numero= $numero+1;
					}
					
				}
				$numeroIguales[$clave] = array($numero,$array_sustituciones[$clave]); 
				//$numero iguales contendrá por cada clave el numero de veces que aparece repetido.
				$numero = 0;
			}
			
			//guardo las posiciones donde aparece cada letra.
			
			foreach($numeroIguales as $clave => $valor){
				$posi = 0;
				for($recorrer = 0;$recorrer<strlen($palabra);$recorrer++){
					if(strlen($clave)===2 && $recorrer+1<strlen($palabra))
						$iguales = strcmp($clave,$palabra[$recorrer].$palabra[$recorrer+1]); //**************!!!!!!!
					else
						$iguales = strcmp($clave,$palabra[$recorrer]);
						
					if($iguales==0){
						$posiciones[$posi] = $recorrer; //guardo en la posicion 2, la posicion donde se encuentra esa letra. 
						$posi++;
					}
				}
				$numeroIguales[$clave][2] = $posiciones;
				
			}
			
			/*$patrones_claves = array_keys($array_combinaciones);
			$patrones = array();
			
			for($k =0;$k<sizeof($patrones_claves);$k++){
				$patrones[$k] = '/'.$patrones_claves[$k].'/';	
			}*/
			//obtengo el numero de valores de cada posicion del array de combinaciones
			$combinar = array();
			$p = 0;
			$numeroCombinaciones = 1;
			//foreach($array_combinaciones as $key=> $value){
				//en combinar guardo las posibilidades que hay en cada
				foreach($numeroIguales as $clave => $valor){
					for($numeroVeces=0;$numeroVeces<$valor[0];$numeroVeces++){
						$cl=$array_combinaciones[$clave];
						$combinar[$p] = count($array_posiciones[$cl])-1; //$combinar[$p] = count($array_combinaciones[$key])-1
						$p = $p+1;	
						$numeroCombinaciones = count($array_posiciones[$array_combinaciones[$clave]]) * $numeroCombinaciones;
					}
				
				}
				//calcula el numero de combinaciones total, por cada palabra.
				
					
			//}
			if($numeroCombinaciones<$totalCombinacionesPalabra){
				//$array_comb contendrá todas las combinaciones de la palabra con los patrones.
				$array_comb=combinaciones($combinar);
			    $comb = 0;
			
				for($m = 0;$m<sizeof($array_comb);$m++){
					$cadCombinaciones = $array_comb[$m];
					//separo por la coma la cadena para luego buscar en array de combinaciones la posicion que necesito
				   	$array2 = explode('|' , $cadCombinaciones);
				 	$j = 0;
				 	$j2 = 0;
				   		foreach($array_combinaciones as $key  => $value){ //$array_combinaciones
				   			$total = $numeroIguales[$key][0]; //añado  			
				   			$array_pos = $array_posiciones[$array_combinaciones[$key]]; //esta linea añadida
				   			for($totalpos = 0;$totalpos<$total;$totalpos++){//añado
				   				$p = $array2[$j2];
				   				$sustituciones[$j] =$array_pos[$p]; //$sustituciones[$j] = $array_combinaciones[$key][$array2[$j]];
				   				$j = $j+1;
				   				$j2 = $j2+1;
				   			}
				   			$reemplazo[$key] = $sustituciones;
				   			unset($sustituciones);
				   			$j = 0;
				   		}
								   		
				   	//en $reemplazo ya tengo según la clave, el valor a sustituir.
				   	$cadenaSustitucion  = $palabra;
				   	$cuantosAumenta=0;
				   	foreach($numeroIguales as $clave => $valor){
				   		$posicion = 0;
						$arrayPosiPalabra = $numeroIguales[$clave][2]; //array donde están las posiciones donde aparece la clave en $palabra
						for($pospalabra = 0;$pospalabra<sizeof($arrayPosiPalabra);$pospalabra++){
							$posiPalabra = $arrayPosiPalabra[$pospalabra];
							
							// $arrayReemplazo= $reemplazo[$clave];
							 $caracter= $reemplazo[$clave][$posicion];
							//mb_substr_replace($cadenaSustitucion,$caracter,$posiPalabra,strlen($caracter));
							$longitud = strlen($caracter);
							
							//if($longitud==2){
				   				//ver si sustituyo dos letras por dos letras, o una letra por dos letras.
				   				//si es una letra por dos letras, tenemos un problema
				   				if(strlen($clave)==1 && strlen($caracter)==2){
				   					if($aumenta===TRUE)
				   						$cadenaSustitucion = mb_substr_replace($cadenaSustitucion,$caracter,$posiPalabra+$cuantosAumenta,1);
				   					else
				   						$cadenaSustitucion = mb_substr_replace($cadenaSustitucion,$caracter,$posiPalabra,1);
				   					//longitud palabra aumenta en uno.
				   					$aumenta = true;
				   					$cuantosAumenta = $cuantosAumenta+1;
				   				} 
				   				else if(strlen($clave)==2 && strlen($caracter)==1){
									$cadenaSustitucion = mb_substr_replace($cadenaSustitucion,$caracter,$posiPalabra,2);				   				
				   				}
				   				else {
									if($aumenta===TRUE)
										$cadenaSustitucion = mb_substr_replace($cadenaSustitucion,$caracter,$posiPalabra+$cuantosAumenta,$longitud); 
				   					else 
				   						$cadenaSustitucion = mb_substr_replace($cadenaSustitucion,$caracter,$posiPalabra,$longitud); 
				   				}
							//}
				   			//else 
				   			 //	$cadenaSustitucion = mb_substr_replace($cadenaSustitucion,$caracter,$posiPalabra,1);
				   				
				   			$posicion++;
							  
							 
							//}
						//}
						}
						
				   	}
				  
					//cuando termino todos los cambios sobre la palabra, la voy guardando en mi array de cambios.
				   	//para evitar que haya duplicados
				   	if(strcmp($palabra,$cadenaSustitucion)!=0){//sensible a mayusculas y minusculas, pero como está en mayusculas, no problema.
   						$array_cambios[$comb] = $cadenaSustitucion;
				   	    $comb = $comb+1;
				   	}
					//$cadenaSustitucion = preg_replace($patrones, $sustituciones , $palabra);
				   //para evitar que haya duplicados
				   /*if(strcmp($palabra,$cadenaSustitucion)!=0){//sensible a mayusculas y minusculas, pero como está en mayusculas, no problema.
   					$array_cambios[$comb] = $cadenaSustitucion;
				   	$comb = $comb+1;
				   }*/
				 
				}			
				
				for($j = 0;$j<sizeof($array_cambios);$j++){
					$cadenaBusqueda = $cadenaBusqueda.'*'." ". $array_cambios[$j];
				}
				
			}//endif $numeroCombinaciones<$totalCombinacionesPalabra
				if(strlen($palabra)>2)
					$cadenaBusqueda = $cadenaBusqueda. '*) ';
				
					//vacío el array_combinaciones para guardar solo las combinaciones de lo que necesito de la siguiente palabra-.
				unset($array_combinaciones);
				unset($array_cambios);
				unset($combinar);
				unset($numeroIguales);
			//	unset($result);
			
		}//end if sizeof($array_combinaciones)
		else{
			if(strlen($palabra)>2)
				$cadenaBusqueda = $cadenaBusqueda. ') ';
		}
		 }
		//BUSCAMOS EN LA BBDD CON LIKE Y CON REGEXP
		 $inicio = time();
		 $matches2 = calles_correos_busqueda_coincidencias(/*$cadc,$compLike,*/$cadenaBusqueda,$provincia,$arrayId);
	
    	// $matches2 = calles_correos_busqueda_coincidencias($cadc,$compLike,$union1,$union2,$union3,$union4,
    	 			//	$union5,$union6,$union7,$union8,$union9,$union10,$union11,$union12,$provincia,$arrayId);
		 //$matches2 = calles_correos_busqueda_coincidencias($cadena,$compLike,$compLike1,$compLike2,$compLike3,$compLike4,
    	 	//			$compLike5,$compLike6,$compLike7,$compLike8,$compLike9,$compLike10,$compLike11,$compLike12,$provincia,$arrayId); //$matches = calles_correos_busqueda_coincidencias($cadena,$compLike,$provincia);
          //ORDENAMOS EL ARRAY CON LAS COMPARACIONES ENCONTRADAS.
    	 if(sizeof($matches1)>0 && sizeof($matches2)>0)
    	 //unifico las dos busquedas encontradas
    	 	$matches = array_merge ($matches1,$matches2);
    	 else if(sizeof($matches1)<1){
    	 	$matches = $matches2;
    	 }
    	 else if(sizeof($matches2)<1) 
    	 	$matches = $matches1;
	 }else {
       $matches = $matches1;
     	}
	
	 $copiaordenacion = array();
	 $ordenacion = $matches;
   	 $distancia = -1;
   	 $arraylev = array();
   	 foreach($ordenacion as $key=>$value){
   		//saco la via pobla
   		$viapobla=$ordenacion[$key]['viapobla'];
   		//cuanto de iguales son $cad(introducida) y la encontrada
   		$lev = levenshtein(strtoupper($cad),$viapobla);
   		$arraylev[$key] =$lev;
   		if($lev == 0){
   			//son iguales
   			$copiaordenacion[$key] = $ordenacion[$key];
   			$distancia = 0;
   			ordenar_distancia_lev($cad,$distancia,$key,$copiaordenacion);
   			
    		}
   		//si no son iguales, veo como ordenar.
  		 else{
   			$distancia = $lev; //guardo la distancia menor
   			$copiaordenacion[$key] = $ordenacion[$key]; 
   			ordenar_distancia_lev($cad,$distancia,$key,$copiaordenacion);
   			//copiaordenacion array con todas las distancias levenshtein ordenadas.
   		}
  		
   	}
	
   	//ordenar por impar-inferior : vias con mismo nombre de calle, ciudad, provincia.
   	$copia = array();
   	foreach($copiaordenacion as $k=>$v){
   		$viapobla1=$copiaordenacion[$k]['viapobla'];
   			foreach($copiaordenacion as $k2=>$v2){
   					if($copiaordenacion[$k]['idregistro']!=$copiaordenacion[$k2]['idregistro']){
                	//no es el mismo registro
   					$viapobla2=$copiaordenacion[$k2]['viapobla'];
   				
   					if($viapobla1 === $viapobla2){
   							//tienen misma via
						$ciudad1=$copiaordenacion[$k]['ciudad'];
						$ciudad2=$copiaordenacion[$k2]['ciudad'];
   						if($ciudad1 == $ciudad2){
						//tienen misma ciudad. Ordenar de menios a más por impar inferior
							$imparinf1 = $copiaordenacion[$k]['nimparinf'];
							$imparinf2 = $copiaordenacion[$k2]['nimparinf'];
							if($imparinf1<$imparinf2){
									$copia[$k2]=$copiaordenacion[$k2];
									$copiaordenacion[$k2] = $copiaordenacion[$k];
									$copiaordenacion[$k] = $copia[$k2];
							}
						}
					}
   						}
   				}
   			}
    // Quitar desde array_devolver hasta drupal_json 
	//descomentar return 
 /*	$array_devolver = array();
   	foreach ($copiaordenacion as $match){
   		
   		$array_devolver[$match['idregistro']] =  		
		  						 '<span class = "muestra_calle"><b>' . $match['tipovia'] . ' ' . '</b></span>' .
		  												  '<span class = "muestra_viapobla">'  . $match['viapobla'] . ' ' . '</span>' .
   		  												  '<span class = "muestra_nimparinf">'	. $match['nimparinf'] . '-' . '</span>'.
   														  '<span class = "muestra_nimparsup">' . $match['nimparsup'] . ' ' . '</span>'.
   														  '<span class = "muestra_nparinf">' . $match['nparinf']. '-' . '</span>'.
   														  '<span class = "muestra_nparsup">' . $match['nparsup'] . ' ' . '</span>'.
		  												  '<span class = "muestra_cp">'. $match['codigo_postal']  . ' ' . '</span>' .
		  												  '<span class = "muestra_descripcion">' . $match['ciudad'] . ' ' . '</span>';
		  						  
		  				
	}
	
    drupal_json($array_devolver); 	*/
  return $copiaordenacion;
  
}
function mb_substr_replace($string, $replacement, $start, $length = null, $encoding = null)
    {
        if (extension_loaded('mbstring') === true)
        {
            $string_length = (is_null($encoding) === true) ? mb_strlen($string) : mb_strlen($string, $encoding);
           
            if ($start < 0)
            {
                $start = max(0, $string_length + $start);
            }
           
            else if ($start > $string_length)
            {
                $start = $string_length;
            }
           
            if ($length < 0)
            {
                $length = max(0, $string_length - $start + $length);
            }
           
            else if ((is_null($length) === true) || ($length > $string_length))
            {
                $length = $string_length;
            }
           
            if (($start + $length) > $string_length)
            {
                $length = $string_length - $start;
            }
           
            if (is_null($encoding) === true)
            {
                return mb_substr($string, 0, $start) . $replacement . mb_substr($string, $start + $length, $string_length - $start - $length);
            }
           
            return mb_substr($string, 0, $start, $encoding) . $replacement . mb_substr($string, $start + $length, $string_length - $start - $length, $encoding);
        }
       
        return (is_null($length) === true) ? substr_replace($string, $replacement, $start) : substr_replace($string, $replacement, $start, $length);
    }
/*function combinaciones($combinar){
	//$cadena_combinaciones = ' ';
	$posibilidades = array();

	//estamos en el caso base.
	if (count($combinar) == 1){
	
		$i = $combinar[0]; 
	
		while ($i>=0){ //$i > = 0 sería para incluir el caso "nada"
			$posibilidades[] = $i--; //',';
		}
		return $posibilidades;
	}

	else{

		$combin_resto = combinaciones(array_slice($combinar,1));
    	for($i = 0; $i<=$combinar[0]; $i++){
    		foreach($combin_resto as $combin_actual){
   		 	 $posibilidades[] =  $i.'|'.$combin_actual; 
   		 	}
    	}
    	
  }
  return $posibilidades;

}*/
function combinaciones($combinar){
  //$cadena_combinaciones = ' ';
  $posibilidades = array();
  //estamos en el caso base.
  if ( count($combinar) == 1){
    do{
     $posibilidades[] = $combinar[0]; //',';
 	 }while($combinar[0]--);
 	 return $posibilidades;
  }
  else{
    $combin_resto = combinaciones(array_slice($combinar,1));
    $size = sizeOf($combin_resto) -1;
    do{
      $i = $size;
     	do{
  		 $posibilidades[] =  $combinar[0].'|'.$combin_resto[$i];  
  	 	}while($i--);
  	 }while($combinar[0]--);
  	}
  return $posibilidades;
}


function calles_correos_busqueda_coincidencias(/*$cadc,$compLike,*/$cadenaBusqueda,$provincia,$arrayId){
	//calles_correos_busqueda_coincidencias($cadc,$compLike,$compLike1,$compLike2,$compLike3,$compLike4,$compLike5,$compLike6,$compLike7,$compLike8,$compLike9,
			//									$compLike10,$compLike11,$compLike12,$provincia,$arrayId){
	 $matches = array();
	 //hago algo del estilo +primera_parte (espacio) +segunda_parte
	
	 //si encuentra posicion significa que está compuesto de dos palabras o más.
 //!!!!!!!QUITOOOOOOOOO 4~~4~~4~~4~~4~~	// $cadcopia = $cadc;
	 //al principio siempre necesitaré un +, porque la querremos
	// $cadcopia = '+' . $cadcopia;
	// $array= explode(' ',$cadcopia);
	// $cad = '+'.implode($array,' +'); //en $cad ya tengo por ej +GRAN +VIA
	
	 
	//$arrayId => array donde guardamos los Id's de la primera busqueda realizada.
	//$cadena una cadena de la forma (idregistro,idregistro,....) para en la segunda búsqueda no tener duplicados
	 $cadena = "(".implode($arrayId,',').")";
	 $sqlInicial = "SELECT CODVIA.descvia,viapobla,idregistro,codigo_postal,CODCIU.descripcion,
  						num_impar_inferior,num_impar_superior,num_par_inferior,num_par_superior FROM {POSTALT}
  						LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad
  				        LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia  WHERE";
	//la busqueda inicial no ha devuelto nada. Posibles errores gramaticales.	
	//if ($string) {
		if(empty($provincia)){
			
			if(!empty($arrayId)){

  				$sql = $sqlInicial." idregistro NOT IN $cadena AND 
  				        (MATCH(viapobla) AGAINST('%s' IN BOOLEAN MODE))
  				        ORDER BY (MATCH(viapobla) AGAINST('%s' IN BOOLEAN MODE)) DESC";
  				//$cad tiene algo de la forma +isabel +la +catolica
  				$result = db_query_range($sql,array($cadenaBusqueda,$cadenaBusqueda), 0, 40);
			}
			else{
						
					$sql = $sqlInicial." (MATCH(viapobla) AGAINST('%s' IN BOOLEAN MODE))
										ORDER BY (MATCH(viapobla) AGAINST('%s' IN BOOLEAN MODE)) DESC";
  				//$cad tiene algo de la forma +isabel +la +catolica
  				$result = db_query_range($sql,array($cadenaBusqueda,$cadenaBusqueda), 0, 40);
			}
  		
		}
		else {
	
			if(!empty($arrayId)){
		
				$sql = $sqlInicial." idregistro NOT IN $cadena AND CODCIU.descripcion='%s' and 
  				 (MATCH(viapobla) AGAINST('%s' IN BOOLEAN MODE))
  				 ORDER BY (MATCH(viapobla) AGAINST('%s' IN BOOLEAN MODE)) DESC";
 				$result = db_query_range($sql,array($provincia,$cadenaBusqueda,$cadenaBusqueda), 0, 40);
			}
			else {
				$sql = $sqlInicial." CODCIU.descripcion='%s' and 
  				 (MATCH(viapobla) AGAINST('%s' IN BOOLEAN MODE))
  				  ORDER BY (MATCH(viapobla) AGAINST('%s' IN BOOLEAN MODE)) DESC";
					$result = db_query_range($sql,array($provincia,$cadenaBusqueda,$cadenaBusqueda), 0, 40);
			}
		
		}
    	 // only 15 results will show
    		while ($calleCorreos = db_fetch_object($result)) {
    			//calle por defecto es vacío (viene en las hojas de comentarios de la bbdd
    			if($calleCorreos->descvia==null){
					$calle = "CALLE";
				}
				else{
					$calle = $calleCorreos->descvia;
				}
		  		$matches[$calleCorreos->idregistro] = 		array("tipovia" => $calle, 
		  		 				  "viapobla" => $calleCorreos->viapobla,
		  		 				  "idregistro" => $calleCorreos->idregistro,
		  		 			      "codigo_postal" => $calleCorreos->codigo_postal,
		  		 				  "ciudad" => $calleCorreos->descripcion,
		  						  "nimparinf" => $calleCorreos->num_impar_inferior,
		  						  "nimparsup" => $calleCorreos->num_impar_superior,
		  						  "nparinf" => $calleCorreos->num_par_inferior,
		  						  "nparsup" => $calleCorreos-> num_par_superior);  		
		      		}
    		
  	//}

	return $matches;
	
}
/*function construirCadComparacionLike($string){
 $cadena1 = $string;
	
	//Separo la funcion de mnb
	$compLike1 = preg_replace('/(NB|MB|NV|MV)/', '%', $cadena1);
	$compLike2 = preg_replace('/(NP|MP)/','%',$cadena1);
	$compLike3 = preg_replace('/(TX|TZ|CH)/','%',$cadena1);
	$compLike4 = preg_replace('/(GU|G)/','%',$cadena1);
	$compLike5 = preg_replace('/(RR|R)/','%',$cadena1);
	

	//siguientes errores.
   	$compLike6 = preg_replace('/[BV]/', '%', $cadena1);	 
    $compLike7 = preg_replace('/(LL|Y|I)/','%',$cadena1);
    $compLike8 = preg_replace('/[GXJ]/','%',$cadena1);
	$compLike9 = preg_replace('/(C|K|QU)/','%',$cadena1); 
	$compLike10 = preg_replace('/(N|Ñ)/','%',$cadena1);
	
	//faltas h
	//BUCLE Y CADENA PARA LA COMPARACION DEL LIKE.
	for($j=0;$j<strlen($copia);$j++){
		$compLike11 = $copia2.'%'.substr($copia,$j,1);
	}
//articulos preposiciones y demas
	
	$patrones = array();
		$patrones[0] = '/ /';
	$sustituciones = array();
		$sustituciones[0] = '( EL | LA | LOS | LAS | EN | UN | DE | DEL | Y | DE EL | DE LA | DE LOS | DE LAS | | ")';
	
	$compLike12 = preg_replace($patrones,'%',$cadena2);
 //return $cadCompLike1
}*/
function busquedaExacta($cad){
	//tenemos que poner la $cad de manera que en la primera búsqueda encuentre la cadena tal cual, por tanto, utilizo 
	//". Luego ya buscaré que contenga la palabra en cualquier punto. 
	
	$cad2 = $cad.'%';
	$cad3 = '"'.$cad.'"';
	$sql = "SELECT CODVIA.descvia,viapobla,idregistro,codigo_postal,CODCIU.descripcion,
  			    num_impar_inferior,num_impar_superior,num_par_inferior,num_par_superior FROM {POSTALT}
  	     		 LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad
  				 LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia WHERE 
		     viapobla like '%s' 
		     
		     ORDER BY viapobla ASC";
		$result  = db_query_range($sql,$cad2,0,60);
     while ($calleCorreos = db_fetch_object($result)) {
    			//calle por defecto es vacío (viene en las hojas de comentarios de la bbdd
    			if($calleCorreos->descvia==null){
					$calle = "CALLE";
				}
				else{
					$calle = $calleCorreos->descvia;
				}
		  		$matches[$calleCorreos->idregistro] = 		array("tipovia" => $calle, 
		  		 				  "viapobla" => $calleCorreos->viapobla,
		  		 				  "idregistro" => $calleCorreos->idregistro,
		  		 			      "codigo_postal" => $calleCorreos->codigo_postal,
		  		 				  "ciudad" => $calleCorreos->descripcion,
		  						  "nimparinf" => $calleCorreos->num_impar_inferior,
		  						  "nimparsup" => $calleCorreos->num_impar_superior,
		  						  "nparinf" => $calleCorreos->num_par_inferior,
		  						  "nparsup" => $calleCorreos-> num_par_superior);  		
		      		}

	return $matches;
     
}


function busquedaExacta_antigua($cad){
	  $sql = "SELECT CODVIA.descvia,viapobla,idregistro,codigo_postal,CODCIU.descripcion,
  				num_impar_inferior,num_impar_superior,num_par_inferior,num_par_superior FROM {POSTALT}
  				 LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad
  				 LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia  WHERE viapobla LIKE '%s' ORDER BY viapobla ASC";
  			$result = db_query_range($sql,$cad,0,60);
     while ($user = db_fetch_object($result)) {
    			//calle por defecto es vacío (viene en las hojas de comentarios de la bbdd
    			if($user->descvia==null){
					$calle = "CALLE";
				}
				else{
					$calle = $user->descvia;
				}
		  		$matches[$user->idregistro] = 		array("tipovia" => $calle, 
		  		 				  "viapobla" => $user->viapobla,
		  		 				  "idregistro" => $user->idregistro,
		  		 			      "codigo_postal" => $user->codigo_postal,
		  		 				  "ciudad" => $user->descripcion,
		  						  "nimparinf" => $user->num_impar_inferior,
		  						  "nimparsup" => $user->num_impar_superior,
		  						  "nparinf" => $user->num_par_inferior,
		  						  "nparsup" => $user-> num_par_superior);  		
		      		}

		return $matches;
     
}

 //bucle que cada dos porcentajes sustituya por uno. 
function quitarDoblePorCiento($cadena){
	
	$cadporc = $cadena;
  	while(strpos($cadporc,'%%')!==FALSE){
		$cadporc = str_replace('%%','%',$cadporc);
 	}	
    return $cadporc;
}

function quitarDobleEspacioBlanco($cadena){
	$cadcopia = $cadena;
	while(strpos($cadcopia,'  ')!==FALSE){
		$cadcopia = str_replace('  ',' ',$cadcopia);
	}
	return $cadcopia;
}
//ordenacion distancia de lev 
function ordenar_distancia_lev($cad,$distancia,$key,&$copiaordenacion){
		
	$copia = array();
   	foreach($copiaordenacion as $key2=>$value2){
   				//saco la via pobla
   				///$registro = explode('#',$copiaordenacion[$key2]); //$ordenacion
   				//$viapobla = $registro[1];
   				$viapobla=$copiaordenacion[$key2]['viapobla'];
   				//cuanto de iguales son $cad(introducida) y la encontrada
   				$lev = levenshtein(strtoupper($cad),$viapobla);
   				if($lev>$distancia){
 				
   					$copia[$key2]=$copiaordenacion[$key2];
   					$copiaordenacion[$key2]=$copiaordenacion[$key];
   				  	$copiaordenacion[$key] = $copia[$key2];
 
   				}		
   	
   		}
}

function calles_correos_errores($string,&$cadena2){
	$cadena1 = $string;
	$patrones = array();
		$patrones[0] = '/[BV]/';
		$patrones[1] = '/(LL|Y|I)/';
		$patrones[2] = '/[GXJ]/';
		$patrones[3] = '/(C|K|QU)/';
		$patrones[4] = '/(N|Ñ)/';
	$sustituciones = array();
		$sustituciones[0] = '[BV]';
		$sustituciones[1] = '(LL|Y|I)';
		$sustituciones[2] = '(G|X|J)';
		$sustituciones[3] = '(C|K|QU)';
		$sustituciones[4] = '(N|Ñ)';
	$cadena = preg_replace($patrones, $sustituciones, $cadena1);
   	$cadena2= preg_replace($patrones, '%', $cadena2);
	return $cadena;
}
//COMPRUEBA EN LA CADENA INTRODUCIDA, QUE SI HAY ESPACIOS, PUEDE TENER ESTA SERIE DE
//PREPOSICIONES O DE ARTICULOS O NADA.
function calles_correos_art_prep($string,&$cadena2){
	
	$cadena1 = $string;
	$patrones = array();
		$patrones[0] = '/ /';
	$sustituciones = array();
		$sustituciones[0] = '( EL | LA | LOS | LAS | EN | UN | DE | DEL | Y | DE EL | DE LA | DE LOS | DE LAS | | ")';
	$cadena = preg_replace($patrones,$sustituciones,$cadena1);
	$cadena2 = preg_replace($patrones,'%',$cadena2);
	return $cadena;
}
//SQL QUE LE PASAMOS LA EXPRESION REGULAR YA FORMADA 
//CON TODAS LOS POSIBLES ERRORES AL INTRODUCIR POR TECLADO.
//HACE LA BUSQUEDA CON REGEXP Y SI ENCUENTRA VALORES, LO DEVUELVE EN UN ARRAY
//DE LA FORMA IDREGISTRO->VIAPOBLA
function calles_correos_busqueda_coincidencias_antigua($string,$compLike,$compLike1,$compLike2,$compLike3,$compLike4,
											$compLike5,$compLike6,$compLike7,$compLike8,$compLike9,$compLike10,
											$compLike11,$compLike12,$provincia,$arrayId){
	$inicio =time();
	$matches = array();
	//$arrayId => array donde guardamos los Id's de la primera busqueda realizada.
	//$cadena una cadena de la forma (idregistro,idregistro,....) para en la segunda búsqueda no tener duplicados
	 $cadena = "(".implode($arrayId,',').")";
	//la busqueda inicial no ha devuelto nada. Posibles errores gramaticales.	
	if ($string) {
		if(empty($provincia)){
			
			
			//vieja....LenTA!!!!!!!
			/*	$ini1 = time();
				
				$sql = "SELECT CODVIA.descvia,viapobla,idregistro,codigo_postal,CODCIU.descripcion,
						num_impar_inferior,num_impar_superior,num_par_inferior,num_par_superior FROM {POSTALT}
						LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad
						LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia WHERE viapobla LIKE '%s' AND viapobla REGEXP '%s'";
  				$result = db_query_range(db_rewrite_sql($sql),$compLike,$string, 0, 40);
				$fin1 = time();
				$total1 = $fin1-$ini1;
				drupal_set_message("tiempo select provincia vacia vieja $total1.");*/
			
				
				
			//nueva, válida
			//$ini2 = time();
			if(!empty($arrayId)){
  				$sql = "SELECT CODVIA.descvia,viapobla,idregistro,codigo_postal,CODCIU.descripcion,
  						num_impar_inferior,num_impar_superior,num_par_inferior,num_par_superior FROM {POSTALT}
  						LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad
  				        LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia  WHERE idregistro NOT IN $cadena AND (viapobla LIKE '%s' 
  				        OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s'  OR viapobla LIKE '%s' OR viapobla LIKE '%s' 
  				        OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s'
  				        OR viapobla LIKE '%s' OR viapobla LIKE '%s')
  				        AND viapobla REGEXP '%s'";
  				$result = db_query_range($sql,array($compLike,$compLike1,$compLike2,$compLike3,$compLike4,
  						  $compLike5,$compLike6,$compLike7,$compLike8,$compLike9,$compLike10,$compLike11,
  						  $compLike12,$string),0,40);
			}
			else{
				$sql = "SELECT CODVIA.descvia,viapobla,idregistro,codigo_postal,CODCIU.descripcion,
  						num_impar_inferior,num_impar_superior,num_par_inferior,num_par_superior FROM {POSTALT}
  						LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad
  				        LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia  WHERE (viapobla LIKE '%s' 
  				        OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s'  OR viapobla LIKE '%s' OR viapobla LIKE '%s' 
  				        OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s'
  				        OR viapobla LIKE '%s' OR viapobla LIKE '%s')
  				        AND viapobla REGEXP '%s'";
  				$result = db_query_range($sql,array($compLike,$compLike1,$compLike2,$compLike3,$compLike4,
  						  $compLike5,$compLike6,$compLike7,$compLike8,$compLike9,$compLike10,$compLike11,
  						  $compLike12,$string),0,40);
			}
  
  			/*$fin2 = time();
  			$total2 = $fin2-$ini2;
  			drupal_set_message("tiempo select provincia vacia nuevo $total2.");*/
			
		}
		else {
			//vieja LENTA!!!!!!
	/*	$ini3 = time();
			$sql = "SELECT CODVIA.descvia,viapobla,idregistro,codigo_postal,CODCIU.descripcion,
				num_impar_inferior,num_impar_superior,num_par_inferior,num_par_superior FROM {POSTALT}
				LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad
				LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia WHERE CODCIU.descripcion='%s' and viapobla LIKE '%s' AND viapobla REGEXP '%s'";
				$result = db_query_range(db_rewrite_sql($sql),$provincia,$compLike,$string, 0, 40);
			$fin3 = time();
			$total3 = $fin3 - $ini3;
			drupal_set_message("tiempo select provincia no vacia viejo $total3.");
		*/
			//NUEVA, VÁLIDA
			
			if(!empty($arrayId)){
		
				$sql = "SELECT CODVIA.descvia,viapobla,idregistro,codigo_postal,CODCIU.descripcion,
  				num_impar_inferior,num_impar_superior,num_par_inferior,num_par_superior FROM {POSTALT}
  				 LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad
  				 LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia  WHERE idregistro NOT IN $cadena AND CODCIU.descripcion='%s' and (viapobla LIKE '%s' 
  				        OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s'  OR viapobla LIKE '%s' OR viapobla LIKE '%s' 
  				        OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s'
  				        OR viapobla LIKE '%s' OR viapobla LIKE '%s')
  				 AND viapobla REGEXP '%s'";
					$result = db_query_range($sql,array($provincia,$compLike,$compLike1,$compLike2,$compLike3,$compLike4,
								$compLike5,$compLike6,$compLike7,$compLike8,$compLike8,$compLike9,$compLike10,$compLike11,$compLike12,$string), 0, 40);
			}
			else {
				$sql = "SELECT CODVIA.descvia,viapobla,idregistro,codigo_postal,CODCIU.descripcion,
  				num_impar_inferior,num_impar_superior,num_par_inferior,num_par_superior FROM {POSTALT}
  				 LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad
  				 LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia  WHERE CODCIU.descripcion='%s' and (viapobla LIKE '%s' 
  				        OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s'  OR viapobla LIKE '%s' OR viapobla LIKE '%s' 
  				        OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s' OR viapobla LIKE '%s'
  				        OR viapobla LIKE '%s' OR viapobla LIKE '%s')
  				 AND viapobla REGEXP '%s'";
					$result = db_query_range($sql,array($provincia,$compLike,$compLike1,$compLike2,$compLike3,$compLike4,
								$compLike5,$compLike6,$compLike7,$compLike8,$compLike9,$compLike10,$compLike11,$compLike12,$string), 0, 40);
			}
		
		}
    	 // only 15 results will show
    		while ($user = db_fetch_object($result)) {
    			//calle por defecto es vacío (viene en las hojas de comentarios de la bbdd
    			if($user->descvia==null){
					$calle = "CALLE";
				}
				else{
					$calle = $user->descvia;
				}
		  		$matches[$user->idregistro] = 		array("tipovia" => $calle, 
		  		 				  "viapobla" => $user->viapobla,
		  		 				  "idregistro" => $user->idregistro,
		  		 			      "codigo_postal" => $user->codigo_postal,
		  		 				  "ciudad" => $user->descripcion,
		  						  "nimparinf" => $user->num_impar_inferior,
		  						  "nimparsup" => $user->num_impar_superior,
		  						  "nparinf" => $user->num_par_inferior,
		  						  "nparsup" => $user-> num_par_superior);  		
		      		}
    		
  	}
  	$final =time();
  	$total = $final - $inicio;
	return $matches;
}
//COMPROBAR QUE TENGAMOS UNA H O NINGUNA EN CUALQUIER POSICION DE LA PALABRA. 
//ASI SE VERIFICA QUE OMITAMOS H INTERCALADAS, AL PRINCIPIO Y DEMÁS.
function calles_correos_faltas_h($cadena,&$copia){

	$longitud = strlen($cadena);
	for($i=0;$i<$longitud;$i++){
		$cadena2 = $cadena2 . 'H?'.mb_substr($cadena,$i,1); //por ejemplo para que no haya problemas con la ñ
	}
	//BUCLE Y CADENA PARA LA COMPARACION DEL LIKE.
	for($j=0;$j<strlen($copia);$j++){
		$copia2=$copia2.'%'.substr($copia,$j,1);
	}
	$copia = $copia2;
	return $cadena2;
}
//ELIMINAR TILDES PALABRA ORIGINAL CASTELLANAS, CATALANAS Y DIERESIS
function calles_correos_eliminar_tildes($string){
	
	$cadena1 = $string;
	$patrones = array();
		$patrones[0] = '/(Á|À|Ä)/';
		$patrones[1] = '/(É|È|Ë)/';
		$patrones[2] = '/(Í|Ì|Ï)/';
		$patrones[3] = '/(Ó|Ò|Ö)/';
		$patrones[4] = '/(Ú|Ù|Ü)/';
	$sustituciones = array();
		$sustituciones[0] = 'A';
		$sustituciones[1] = 'E';
		$sustituciones[2] = 'I';
		$sustituciones[3] = 'O';
		$sustituciones[4] = 'U';
	$cadena = preg_replace ($patrones, $sustituciones,$cadena1);
	return $cadena;
}

//comprueba palabras que se escriben con x pero suenan como j.
//segun lo que he encontrado hay 3 de ese estilo: 
// mexico, oaxaca, texas
//y palabras que tengan nb, mb,mp etc.
function calles_correos_errores_mnb($string,&$cadena2){
	
	$cadena1 = $string;
	$patrones = array();
		$patrones[0] = '/(NB|MB|NV|MV)/';
		$patrones[1] = '/(NP|MP)/';
		$patrones[2] = '/(TX|TZ|CH)/';
		$patrones[3] = '/(GU|G)/';
		$patrones[4] = '/(RR|R)/';
	$sustituciones = array();
		$sustituciones[0] = '(NB|MB|NV|MV)';
		$sustituciones[1] = '(NP|MP)';
		$sustituciones[2] = '(TX|TZ|CH)';
		$sustituciones[3] = '(GU|G)';
		$sustituciones[4] = '(RR|R)';
	$cadena = preg_replace ($patrones, $sustituciones, $cadena1);
	$cadena2=preg_replace($patrones, '%', $cadena2);
	return $cadena;
}

