<?php

define('CORREOS_MAX_REGISTROS_MOSTRAR', 60);
define('CORREOS_MAX_COMBINACIONES_PALABRA', 1000);
define('CORREOS_MAX_BUSQUEDA_CANTIDAD', 500);

function calles_correos_existe_registro_id($id){
	$sql = "SELECT idregistro FROM {POSTALT} WHERE idregistro = %d";
	$result = db_result(db_query($sql,$id));
	if($result !== false)$result = TRUE;
	return $result;
}


function calles_correos_devolver_tipo_via($codigo){
	
	$query = db_result(db_query("SELECT CODVIA.descvia FROM {POSTALT} ".
							"LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia ".
							"WHERE POSTALT.idregistro=%d",$codigo));	
	//si es vacio, se sabe por la documentacion de las tablas que es calle el tipo de via.
	if(!empty($codigo) && $query==null && is_numeric($codigo)){
		$query = "CALLE";
	}
	
	return $query;
}

function calles_correos_existe_direccion($tipovia,$calle, $codigo_postal, $localidad){
	$existe =false;
	if (strlen($codigo_postal)>3 && is_numeric($codigo_postal) &&  strlen($localidad)>1 && strlen($calle)>0){
		$tipovia = mb_strtoupper($tipovia);
		//if ($tipovia == 'CL') $tipovia = '';
		$sql = "SELECT ciu.descripcion FROM {POSTALT} pos LEFT JOIN {CODCIU} ciu ON pos.codlocalidad = ciu.codlocalidad WHERE ".
			"pos.codigo_postal = %d AND pos.codvia = '%s' AND pos.viapobla = '%s' AND ciu.descripcion = '%s'";
		$result = db_result(db_query($sql, intval($codigo_postal,10), $tipovia, mb_strtoupper($calle), mb_strtoupper($localidad)));
		if($result !== false)$existe =true;;
	}
	return $existe;
}
function calles_correos_devolver_datos_registro($codigo){	
	$sql = "SELECT POSTALT.codvia, POSTALT.viapobla, POSTALT.codigo_postal, CODCIU.descripcion FROM {POSTALT} ".
			"LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad ". 
			"WHERE POSTALT.idregistro=%d";	
	$result = db_query($sql, $codigo);
	$datos = array();
	while ($data = db_fetch_array($result)){
		$datos['localidad'] = $data['descripcion'];
		$datos['codigo_postal'] = str_pad($data['codigo_postal'],5,"0",STR_PAD_LEFT);;
		$datos['calle'] = $data['viapobla'];	
		$datos['tipovia'] = $data['codvia'];
		//if(is_null($data['codvia'])||empty($data['codvia']))$datos['tipovia'] = 'CL';
	}
	return $datos;
}

function calles_correos_devolver_via_codigo_registro($codigo){

	return db_result(db_query("SELECT viapobla FROM {POSTALT} ".
								 "WHERE POSTALT.idregistro=%d", $codigo));
}

function calles_correos_devolver_codigo_postal($codigo){
	
	return db_result(db_query("SELECT codigo_postal FROM {POSTALT} ".
								"WHERE POSTALT.idregistro=%d", $codigo));
}
function calles_correos_devolver_poblacion($codigo){

	return db_result(db_query("SELECT CODCIU.descripcion FROM POSTALT,CODCIU where ".
	                            "POSTALT.codlocalidad = CODCIU.codlocalidad and POSTALT.idregistro = %d",$codigo));		
}

function calles_correos_autocomplete($string = '', $provincia = '', $codigo_postal = '',&$info_coincidencias){
	 //variable para controlar que se ejecuten los microtime o no.
	 $depurar = FALSE;
	 $num_coincidencias_exactas_total = 0;
	 $num_coincidencias_similares_total = 0;
	 $num_coincidencias_exactas_mostradas = 0;
	 $num_coincidencias_similares_mostradas = 0;
	 if($depurar)  $inicioi = microtime(true);
	 
  	
	 //$totalCombinacionesPalabra = 100;
     //elimino espacios en blanco del final del string
    
     //convertir toda la cadena a mayusculas 
     $string = mb_strtoupper(rtrim($string)); //para que no haya problemas como con el strtoupper al pasar a mayusculas con la letra ñ.
     //eliminar tildes
    
     //a la hora de hacer la comparación para autocompletar es donde tendré que ver si ha encontrado alguna cadena
     //igual a lo intruducido. Si no, entonces hacemos las posibles búsquedas por los patrones. 
    
     //quito dobles espacios en blanco
     $cad = calles_correos_quitarDobleEspacioBlanco(calles_correos_eliminar_tildes($string)); 
      //todo a mayusculas y sin tildes.
    
     
     $matches1 =calles_correos_busqueda_coincidencias($cad,true, $provincia,$codigo_postal,$num_coincidencias_exactas_mostradas,$num_coincidencias_exactas_total);
     
     //guardo en $arrayId todos los Id's que hemos encontrado en la primera búsqueda.
     //teniendo en cuenta que $matches1, es un array cuyos índices son las claves
     $arrayId = array_keys($matches1);
     //tamaño del array tras realizar la primera busqueda
     $longitud = sizeof($matches1);
	//variable booleana que me indica si estamos tratando con la ultima pabra 2
     $ultimaPalabra = false;
     //si despues de la primera busqueda no hemos encontrado el minimo de registros necesarios,
	 //seguimos buscando.
	 //verifico si es solo una palabra o no. De forma que, 
	 // como "cad" devuelve cadenas donde encuentre esa cadena de forma seguida en cualquier parte, 
	 //si solo es una palabra, lo que no haya encontrado en la primera búsqueda no lo va a encontrar en la segunda
	 $array_cambios = array();
     if($longitud<CORREOS_MAX_REGISTROS_MOSTRAR){
     	
		 //CONSTRUCCION CADENA LIKE
		 $cadena1 = $cad; 
		 $array_posiciones = array(
		 			//array('NB','MB','NV','MV'),
		 			array ('NP','MP'),
		 			array('NB','MB'),
		 			array('TX','TZ','CH'),
		 			array('GU','G','X','J'),
		 			array('RR','R'),
		 			array('V','B'),
		 			array('HI','LL','Y','I'),
		 			array('C','K','QU'),
		 			array('NY','Ñ'),
		 			array('HA','A'),
		 			array('HE','E'),
		 			array('HO','O'),
		 			array('HU','U'),
		 			);	//array('N','Ñ'));
 	 
		 $array_sustituciones = array(); //array donde tendremos por cada clave, la posicion donde se encuentra en $array_posiciones
		 
		 if($depurar)  $tiempo1 = microtime(true);
		 
		 foreach($array_posiciones as $key => $value){
		 	foreach($value as $key2 => $value2){
		 		$array_sustituciones[$value2] = $key;
		 	}
		 }
		 if($depurar){
		  	$tiempo2 = microtime(true);
		  	$tiempo3 = $tiempo2-$tiempo1;
		 }
		 //array de palabras <3 para excluir de la busqueda. Como voy a tratar las palabras de forma individual,
		 //quito las combinaciones de el, de la, de los, de las, porque será formada por esas individualmente
		 $opcionales = array('EL','LA','LOS','LAS','EN','UN','DE','DEL','Y','A','CON','POR','SIN','SO');
				
		 //Guardo en un array ,la calle introducida por teclado. Teniendo en cada posicion del array, una palabra.
		 //Teniendo en cuenta que se separa por el espacio en blanco.
		 $array_separar = explode(" ", $cadena1);
		 $longArraySeparar = sizeof($array_separar);
		 //recorro el array por palabras
		 for($i = 0; $i<$longArraySeparar;$i++){
		 	//por cada palabra introducida, ver si hay alguna letra a sustituir.
		 	$palabra = $array_separar[$i];
		 	$longPalabra = mb_strlen($palabra);
		    if(($i+1 === $longArraySeparar)) $ultimaPalabra = true;
			$numeroIguales = array();
 			//si es >2 y no es el final y no está en la lista de opcionales
 		    if(!in_array($palabra,$opcionales) || $ultimaPalabra){
 				$cadenaBusqueda = $cadenaBusqueda.' +(>';
				//guardo la primera palabra en el array
				$array_cambios[] = $palabra;
 				
 				foreach($array_sustituciones as $key => $value){
					$pos = strpos($palabra,$key);
		 			if($pos!==FALSE){
		 				$array_combinaciones[$key] = $value;
		 				$numeroIguales[$key] = array(substr_count($palabra,$key),$array_sustituciones[$key]); 
		 			}
     	 		}//end foreach		 	
				//$array_combinaciones a cambiar
				if(sizeof($array_combinaciones)>0){
					
				//recorro $array_combinaciones para ver en $palabra cuantlas letras hay de cada $key
				//repeticiones de $key en palabra
				/**
				 * $numeroIguales[key][0] = numero de veces que aparece
				 * $numeroiguales[key][1] = por lo que lo sustituimos
				 * $numeroIguales[key][2] = las posiciones donde aparece;
				 * */ 
					if($depurar)  $inicioPosiciones = microtime(true);
						
					calculoPosiciones($numeroIguales,$palabra,$array_sustituciones); //paso por referencia $numeroIguales y $array_sustituciones
					
					if($depurar) {
						$finalPosiciones = microtime(true);
						$totalPosiciones = $finalPosiciones-$inicioPosiciones;
					}
					//obtengo el numero de valores de cada posicion del array de combinaciones
					$combinar = array();
					if($depurar)  $tiempoNumCombinaciones = microtime(true);
						
					$numeroCombinaciones = 1;
					//en combinar guardo las posibilidades que hay en cada
					foreach($numeroIguales as $clave => $valor){
						$cantidad = count($array_posiciones[$array_combinaciones[$clave]]);
						$numeroCombinaciones *= pow($cantidad,$valor[0]);
						$cantidad--;
					
						for($numeroVeces=0;$numeroVeces<$valor[0];$numeroVeces++){
							$combinar[] = $cantidad; 
						}
					}
					//calcula el numero de combinaciones total, por cada palabra.
					if($depurar){
						$tiempoNumCombinaciones2 = microtime(true);
						$tiempoNumCombinaciones3 = $tiempoNumCombinaciones2-$tiempoNumCombinaciones;	
					}  

					//$array_comb contendrá todas las combinaciones de la palabra con los patrones.
					//hacemos combinaciones si la palabra es >2 
					if($numeroCombinaciones<CORREOS_MAX_COMBINACIONES_PALABRA){
						$array_comb=calles_correos_combinaciones($combinar);
			    		if($depurar)  $tiempoTodasCombinaciones = microtime(true);
				
						foreach($array_comb as $keyArrayComb => $valorArrayComb){
							if($depurar)  $tiempoSustituciones = microtime(true);
							//separo por la coma la cadena para luego buscar en array de combinaciones la posicion que necesito
				   			$array2 = explode('|' , $valorArrayComb);
				 			$j2 = 0;
				 			$reemplazo = array();
				   			foreach($array_combinaciones as $key  => $value){ //$array_combinaciones
				   		
				   				$total = $numeroIguales[$key][0];			
				   				for($totalpos = 0;$totalpos<$total;$totalpos++){
				   					$reemplazo[$key][] =$array_posiciones[$value][$array2[$j2]];
				   					$j2++;
				   				}
				   			
				   			}
				   			if($depurar){
				   				$tiempoSustituciones2 = microtime(true);
								$tiempoSustituciones3 = $tiempoSustituciones2-$tiempoSustituciones;		
				   			} 	   		
				   			//en $reemplazo ya tengo según la clave, el valor a sustituir.
				   			$cadenaSustitucion  = $palabra;
				  			$var_anterior = 0;	
				  			$arrayOrdenado = array();	
				  			/**
				  			 * $arrayOrdenado ordena ascendentemente por el numero de posicion 
				  		 	   $arrayOrdenado[1] significa que es en la posicion 1 donde cambiamos
				  			   será:
				  		   	   $arrayOrdenado[1][0] = 'valor de la clave'
				  		       $arrayOrdenado[1][1] = 'Valor por el que sustituimos'.
				  		    */
				  			calles_correos_ordenarNumeroIguales($numeroIguales,$arrayOrdenado,$reemplazo);   	//en $arrayOrdenado
				   		 	foreach($arrayOrdenado as $clave => $valor){
				   		 		$posicion = 0;
				   		 		//$clave será la posicion a cambiar;
				   		 		$caracter = $valor[1];
				   		 		$longitud = mb_strlen($valor[1]);
				   		 		$longitudClave = mb_strlen($valor[0]); //valor de la clave antigua
				   		 		$start = $clave+$var_anterior; //$clave es la posicion donde se encuentra	
				   		 		$cadenaSustitucion = calles_correos_mb_substr_replace($cadenaSustitucion, $caracter, $start,$longitudClave);
				   				$var_anterior += $longitud-$longitudClave;
				   				$posicion++;
				   		 	}
				   		
							//cuando termino todos los cambios sobre la palabra, la voy guardando en mi array de cambios.
				   			//para evitar que haya duplicados
				    		//sensible a mayusculas y minusculas, pero como está en mayusculas, no problema.
				    		//verifico que la combinacion que venga, no esté ya en el array de cambios.
							
				   		 	if(!in_array($cadenaSustitucion,$array_cambios))
			   					$array_cambios[] = $cadenaSustitucion;
					
				   			//ya hemos guardado esa palabra, ahora ya las posiciones ocupadas de la anterior palabra no nos interesan
							unset($posicionesOcupadas);
						}	//end foreach
				
			    		$delimitador = $ultimaPalabra?"* ":" ";
						$cadenaBusqueda.= implode($delimitador,$array_cambios);
						
					}//endif $numeroCombinaciones<$totalCombinacionesPalabra
					else
						$cadenaBusqueda.=$palabra;
						
					$cadenaBusqueda .= $ultimaPalabra?"*)":") ";	
					//vacío el array_combinaciones para guardar solo las combinaciones de lo que necesito de la siguiente palabra-.
					unset($array_combinaciones);
					unset($array_cambios);
					unset($combinar);
					unset($numeroIguales);
					
				}//end if sizeof($array_combinaciones)
				else{
					$cadenaBusqueda .= $ultimaPalabra?$palabra."*) ":$palabra.") ";
					if(!$ultimaPalabra)
						unset($array_cambios); //no me interesa guardar esa palabra
				}
		 	}//endif  if(!in_array($palabra,$opcionales) ||  $ultimaPalabra){
	  	}//endfor inicial
	 if($depurar){
	 	$tiempoTodasCombinaciones2 = microtime(true);
	 	$inicioConsulta = microtime(true);
	 }
	 $matches2 = calles_correos_busqueda_coincidencias($cadenaBusqueda,false,$provincia,$codigo_postal,$num_coincidencias_similares_mostradas,$num_coincidencias_similares_total,$arrayId);
	 if($depurar)  $finalConsulta = microtime(true);
	 
     $matches = $matches1 + $matches2; //guardamos en matches lo encontrado en busquedaExacta($matches1) y en la busqueda del full text($matches2)
	 
     }//if grande de numerocombinaciones
	 //si busquedaExacta ya devuelve el maximo de registros permitidos ;
	 //Entonces $matches contendrá el array $matches1 que es el que devolvió la búsqueda Exacta realizada la primera vez, sobre 
	 //la palabra introducida.
	 else
     	$matches = $matches1;
     
     if($depurar){	
     	$inicioOrdenacion = microtime(true);	
     	$inicioOrdenacionLev = microtime(true);	
     }
	 $ordenacion = $matches;	
   	 //ORDENAMOS EL ARRAY CON LAS COMPARACIONES ENCONTRADAS.
 	 //for donde ordeno por la distancia de levenshtein
 	 $array_lev = array();
   	 foreach($ordenacion as $key=>$value)
   		$array_lev[$key] = levenshtein($cad,$value['viapobla']); //guardo todas las distancias de lev;
   	 
   	 asort($array_lev,SORT_NUMERIC); //ordena $array_lev de manera numerica de menor distancia de lev a mayor.
  	 /**
  	  * $arrayGuardar será del estilo
  	  * $arrayGuardar[cuidad|viapobla]['idregistro'] = nimparinf (que será un entero)
  	  */
   	 $arrayGuardar = array();
   	 foreach($array_lev as $keyLev=>$valueLev){
   	 	 //se van guardando claves según la posicion en la que aparecen realmente. 
 		 //no hace falta un nuevo array de posiciones.
 		 $arrayGuardar[$ordenacion[$keyLev]['ciudad'].'|'.$ordenacion[$keyLev]['viapobla']][$ordenacion[$keyLev]['idregistro']] = $ordenacion[$keyLev]['nimparinf'];
   	 }
   	//una vez ordenados por levenshtein, tenemos que ordenarlos por impar inferior.
   	if($depurar)  $inicioOrdenacionImpar = microtime(true); 

 	//ordeno $arrayGuardar por imparinferior
 	//y al pasar por referencia el valor &$valorGuardar, se actualiza directamente
 	foreach($arrayGuardar as &$valorGuardar){
 		asort($valorGuardar,SORT_NUMERIC); //ordena de menos a mas
 	}
 	$arrayOrdenacion =array();
	foreach($arrayGuardar as $clavePos=>$valorPos){
		foreach($valorPos as $clave => $valor){
			$arrayOrdenacion[$clave] = $ordenacion[$clave];
		}
	}
	if($depurar){
 		$finalOrdenacionImpar = microtime(true);
  		$finalOrdenacion = microtime(true); 
 		//copiaordenacion va por referencia &$copiaordenacion.
 		$finalOrdenacionLev = microtime(true);
  
	    $finali = microtime(true); //tiempo total
		$totali = $finali-$inicioi;
		//tiempo consulta
		$totalConsulta = $finalConsulta-$inicioConsulta;
		//total ordenar por lev y por impar
		$totalOrdenacion  = $finalOrdenacion - $inicioOrdenacion;
		//Ordenacion Lev
		$totalOrdenacionLev = $finalOrdenacionLev - $inicioOrdenacionLev;
		//Ordenacion por impar
		$totalOrdenacionImpar = $finalOrdenacionImpar - $inicioOrdenacionImpar;
    	//tiempo en hacer todas las modificaciones de la palabra
    	$tiempoTodasCombinaciones3 = $tiempoTodasCombinaciones2-$tiempoTodasCombinaciones;
	}
	// Quitar desde array_devolver hasta drupal_json 
	//descomentar return 
  /*  $array_devolver = array();
   	foreach ($arrayOrdenacion as $match){
   		$array_devolver[$match['idregistro']] =  		
		  						 '<span class = "muestra_calle"><b>' . $match['tipovia'] . ' ' . '</b></span>' .
		  												  '<span class = "muestra_viapobla">'  . $match['viapobla'] . ' ' . '</span>' .
   		  												  '<span class = "muestra_nimparinf">'	. $match['nimparinf'] . '-' . '</span>'.
   														  '<span class = "muestra_nimparsup">' . $match['nimparsup'] . ' ' . '</span>'.
   														  '<span class = "muestra_nparinf">' . $match['nparinf']. '-' . '</span>'.
   														  '<span class = "muestra_nparsup">' . $match['nparsup'] . ' ' . '</span>'.
		  												  '<span class = "muestra_cp">'. $match['codigo_postal']  . ' ' . '</span>' .
		  												  '<span class = "muestra_descripcion">' . $match['ciudad'] . ' ' . '</span>';
			
	}//end foreach
	
    drupal_json($array_devolver);*/
	
	//CORREOS_MAX_REGISTROS_MOSTRAR
	
	
	if (($num_coincidencias_exactas_total > CORREOS_MAX_REGISTROS_MOSTRAR) ||
		(($num_coincidencias_exactas_total == 0)&& ($num_coincidencias_similares_total >CORREOS_MAX_REGISTROS_MOSTRAR))){
			$info_coincidencias['necesario_filtro']= TRUE; 
	}
	else{
		$info_coincidencias['necesario_filtro']= FALSE; 
	}	
	
	if ($num_coincidencias_exactas_total == CORREOS_MAX_BUSQUEDA_CANTIDAD)$num_coincidencias_exactas_total.='+';
	if ($num_coincidencias_similares_total == CORREOS_MAX_BUSQUEDA_CANTIDAD)$num_coincidencias_similares_total.='+';
	
	$info_coincidencias['exactas_totales'] = $num_coincidencias_exactas_total;
	$info_coincidencias['exactas_mostradas'] = $num_coincidencias_exactas_mostradas;
	$info_coincidencias['similares_totales'] = $num_coincidencias_similares_total;
	$info_coincidencias['similares_mostradas'] = $num_coincidencias_similares_mostradas;
	
	
	
	
  return $arrayOrdenacion;
  
}
function calles_correos_ordenarNumeroIguales(&$numeroIguales,&$arrayOrdenado,&$reemplazo){
	foreach($numeroIguales as $clave => $valor){
		$posicion = 0;
		foreach($valor[2] as $claveArrayPosiPalabra => $valorArrayPosiPalabra){
				$arrayOrdenado[$valorArrayPosiPalabra] = array($clave, $reemplazo[$clave][$posicion]); 
				$posicion++;
		}
	}
	ksort($arrayOrdenado);

}

function calculoPosiciones(&$numeroIguales,$palabra,&$array_sustituciones){
	$posOcupadas = array();//añado jueves a ultima hora
	foreach($numeroIguales as $clave => $valor){ 
		$posInicial = 0;
		$posi = 0;
		$posiciones = array();
		$longitudClave = mb_strlen($clave);
		while(($posAparicion= mb_strpos($palabra,$clave,$posInicial))!== FALSE){
			//caso que sea RR
			//este if es para las claves, que pueden formar parte de otra clave, para que no cuente las posiciones dos veces, y por tanto, 
			//no cree combinaciones innecesarias. 
			
			//compruebo que no este ocupada esa posicion 
			if( $posOcupadas[$posAparicion]!==1){
				//si no está ocupada, según la longitud de la clave, ocupo una o dos posiciones.
				$posOcupadas[$posAparicion] = 1; //caso de longitud clave uno
				if($longitudClave===2){
					$posOcupadas[$posAparicion+1] = 1; //caso de longitud clave 2;
				}
				$posiciones[$posi] = $posAparicion; //guardo la posicion donde aparece la clave.
		 	 	$posi++;
				
			}
			$posInicial = $posAparicion+$longitudClave;//1;
	
		} //end while
		if(count($posiciones)>0){ //existe en al menos una posicion de la palabra
			$numeroIguales[$clave][0] = count($posiciones); //actualizo con el numero real de veces que aparece
			$numeroIguales[$clave][2] = $posiciones;
		}
		else //sino,no me interesa. Elimino esa clave, para que no cree combinaciones innecesarias
			unset($numeroIguales[$clave]);
	}
}


function calles_correos_mb_substr_replace($string, $replacement, $start, $length = null, $encoding = null){
        if (extension_loaded('mbstring'))
        {
            $string_length = (is_null($encoding)) ? mb_strlen($string) : mb_strlen($string, $encoding);
           
            if ($start < 0){
                $start = max(0, $string_length + $start);
            }       
            else if ($start > $string_length){
                $start = $string_length;
            }
            if ($length < 0){
                $length = max(0, $string_length - $start + $length);
            }
            else if ((is_null($length)) || ($length > $string_length)){
                $length = $string_length;
            }
            if (($start + $length) > $string_length){
                $length = $string_length - $start;
            }
            if (is_null($encoding)){
                return mb_substr($string, 0, $start) . $replacement . mb_substr($string, $start + $length, $string_length - $start - $length);
            }
            return mb_substr($string, 0, $start, $encoding) . $replacement . mb_substr($string, $start + $length, $string_length - $start - $length, $encoding);
        }
        return (is_null($length)) ? substr_replace($string, $replacement, $start) : substr_replace($string, $replacement, $start, $length);
}

function calles_correos_combinaciones($combinar){

  $posibilidades = array();
  //estamos en el caso base.
  if ( count($combinar) == 1){
    do{
     $posibilidades[] = $combinar[0]; 
 	 }while($combinar[0]--);
 	 return $posibilidades;
  }
  else{
    $combin_resto = calles_correos_combinaciones(array_slice($combinar,1));
    $size = sizeOf($combin_resto) -1;
    do{
      $i = $size;
     	do{
  		 $posibilidades[] =  $combinar[0].'|'.$combin_resto[$i];  
  	 	}while($i--);
  	 }while($combinar[0]--);
  	}
  return $posibilidades;
}


function calles_correos_busqueda_coincidencias($cadenaBusqueda,$busquedaExacta, $provincia,$codigo_postal,&$num_coincidencias_mostradas,&$num_total_coincidencias,$arrayId=NULL){
	
	 $matches = array();
	 $count_arrayID = 0;
	 
	 $sql_count = "SELECT COUNT(*) ";
	 $sql_data = "SELECT CODVIA.descvia,viapobla,idregistro,codigo_postal,CODCIU.descripcion,PROV.nombre,".
  				   "num_impar_inferior,num_impar_superior,num_par_inferior,num_par_superior ";
	 $sql_comun = "FROM {POSTALT} LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad ".
  				   "LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia  ".
	 			   "LEFT OUTER JOIN {PROV} ON POSTALT.provincia = PROV.id ".
  				   "WHERE ";
	//la busqueda inicial no ha devuelto nada. Posibles errores gramaticales.	
	$sql = $sql_data.$sql_comun;
	//$sql_num_registro = $sql_count.$sql_comun;
	 
	 if(!empty($codigo_postal))$sql.=  "codigo_postal = $codigo_postal AND ";
	 elseif(!empty($provincia))$sql.=  "provincia = $provincia AND ";
	 
	 if($busquedaExacta){
	 	//$sql_like = "viapobla like '%s' ";
	 	$sql_like = "viapobla = '%s' ";
	 	$sql.=$sql_like; 
	 	//$sql_num_registro.=$sql_like; 
	 	$result  = db_query_range($sql,$cadenaBusqueda,0,CORREOS_MAX_BUSQUEDA_CANTIDAD);//CORREOS_MAX_REGISTROS_MOSTRAR
	 	//$num_total_coincidencias = db_result(db_query($sql_num_registro,$cadenaBusqueda));
	 }
	 else{
	 	
		 if(!empty($arrayId)){
		 	$cadena = "(".implode($arrayId,',').")";
		 	$sql.=  "idregistro NOT IN $cadena AND ";
		 	$count_arrayID = count($arrayId) ;
		 }
		
		 
		 $sql_order_by = "ORDER BY (MATCH(viapobla) AGAINST('%s' IN BOOLEAN MODE)) DESC";
		 $sql_match = "(MATCH(viapobla) AGAINST('%s' IN BOOLEAN MODE)) ";
	 	$sql.= $sql_match.$sql_order_by;
	 	//$sql_num_registro.=$sql_match; 
  				      
	 	 $result = db_query_range($sql,array($cadenaBusqueda,$cadenaBusqueda), 0, CORREOS_MAX_BUSQUEDA_CANTIDAD);//CORREOS_MAX_REGISTROS_MOSTRAR - count($arrayId) );
	 	//$num_total_coincidencias = db_result(db_query($sql_num_registro,$cadenaBusqueda));
	 }
	 
	$calles_procesadas = 0; 
	$restantes_mostrar = $busquedaExacta?CORREOS_MAX_REGISTROS_MOSTRAR: CORREOS_MAX_REGISTROS_MOSTRAR - $count_arrayID;
    	 // only 15 results will show
    while ($calleCorreos = db_fetch_object($result)) {
    			//calle por defecto es vacío (viene en las hojas de comentarios de la bbdd
    	if ($calles_procesadas++ < $restantes_mostrar){
    		$matches[$calleCorreos->idregistro] = array("tipovia" => $calleCorreos->descvia, 
		  		 				                    "viapobla" => $calleCorreos->viapobla,
		  		 				                      "idregistro" => $calleCorreos->idregistro,
		  		 			                          "codigo_postal" => str_pad($calleCorreos->codigo_postal,5,"0",STR_PAD_LEFT),
		  		 				                      "ciudad" => $calleCorreos->descripcion,
		  						                      "nimparinf" => $calleCorreos->num_impar_inferior,
		  						                      "nimparsup" => $calleCorreos->num_impar_superior,
		  						                      "nparinf" => $calleCorreos->num_par_inferior,
		  						                      "nparsup" => $calleCorreos-> num_par_superior,
		  											  "provincia" => $calleCorreos-> nombre);  	
    	}
	
	} //end while
	
	$num_total_coincidencias = $calles_procesadas;
	$num_coincidencias_mostradas = count($matches);
	
	return $matches;
	
}
/*
function busquedaExacta($cad, $provincia = ''){
	//tenemos que poner la $cad de manera que en la primera búsqueda encuentre la cadena tal cual, por tanto, utilizo 
	//". Luego ya buscaré que contenga la palabra en cualquier punto. 
	
	$matches = array();
	//$cad2 = $cad.'%';
	//$cad3 = '"'.$cad.'"';
	$sql = "SELECT CODVIA.descvia,viapobla,idregistro,codigo_postal,CODCIU.descripcion,PROV.nombre,".
  		   "num_impar_inferior,num_impar_superior,num_par_inferior,num_par_superior FROM {POSTALT} ".
  	       "LEFT OUTER JOIN {CODCIU} ON POSTALT.codlocalidad = CODCIU.codlocalidad ".
  		   "LEFT OUTER JOIN {CODVIA} ON POSTALT.codvia = CODVIA.codvia ".
  		   "LEFT OUTER JOIN {PROV} ON POSTALT.provincia = PROV.id ".
  		   "WHERE ";

	
	
	
	if ($provincia != '')$sql.= "provincia = ".$provincia." AND ";
	$sql.="viapobla like '%s' "; 
		  
	
     while ($calleCorreos = db_fetch_object($result)) {
    			//calle por defecto es vacío (viene en las hojas de comentarios de la bbdd
		  		$matches[$calleCorreos->idregistro] = array("tipovia" => $calleCorreos->descvia, 
		  		 				                      "viapobla" => $calleCorreos->viapobla,
		  		 				                      "idregistro" => $calleCorreos->idregistro,
		  		 			                          "codigo_postal" => str_pad($calleCorreos->codigo_postal,5,"0",STR_PAD_LEFT),
		  		 				                      "ciudad" => $calleCorreos->descripcion,
		  						                      "nimparinf" => $calleCorreos->num_impar_inferior,
		  						                      "nimparsup" => $calleCorreos->num_impar_superior,
		  						                      "nparinf" => $calleCorreos->num_par_inferior,
		  						                      "nparsup" => $calleCorreos-> num_par_superior,
		  											  "provincia" => $calleCorreos-> nombre);  		
    } //end while
	return $matches;
     
}
*/

function calles_correos_quitarDobleEspacioBlanco($cadena){
	while(strpos($cadena,'  ')!==FALSE)$cadena = str_replace('  ',' ',$cadena);
	return $cadena;
}


//ELIMINAR TILDES PALABRA ORIGINAL CASTELLANAS, CATALANAS Y DIERESIS
function calles_correos_eliminar_tildes($string){
	$patrones = array('/(Á|À|Ä)/','/(É|È|Ë)/','/(Í|Ì|Ï)/','/(Ó|Ò|Ö)/','/(Ú|Ù|Ü)/');
	$sustituciones = array('A','E','I','O','U');
	return preg_replace ($patrones, $sustituciones,$string);
}



